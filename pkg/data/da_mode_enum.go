// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.7
// Revision: bf63e108589bbd2327b13ec2c5da532aad234029
// Build Date: 2023-07-25T23:27:55Z
// Built By: goreleaser

package data

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strconv"

	"github.com/pkg/errors"
)

const (
	// DAModeL1 is a DAMode of type L1.
	DAModeL1 DAMode = "L1"
	// DAModeL2 is a DAMode of type L2.
	DAModeL2 DAMode = "L2"
)

var ErrInvalidDAMode = errors.New("not a valid DAMode")

// DAModeValues returns a list of the values for DAMode
func DAModeValues() []DAMode {
	return []DAMode{
		DAModeL1,
		DAModeL2,
	}
}

// String implements the Stringer interface.
func (x DAMode) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x DAMode) IsValid() bool {
	_, err := ParseDAMode(string(x))
	return err == nil
}

var _DAModeValue = map[string]DAMode{
	"L1": DAModeL1,
	"L2": DAModeL2,
}

// ParseDAMode attempts to convert a string to a DAMode.
func ParseDAMode(name string) (DAMode, error) {
	if x, ok := _DAModeValue[name]; ok {
		return x, nil
	}
	return DAMode(""), fmt.Errorf("%s is %w", name, ErrInvalidDAMode)
}

// MarshalText implements the text marshaller method.
func (x DAMode) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *DAMode) UnmarshalText(text []byte) error {
	tmp, err := ParseDAMode(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var _values = DAModeValues()

func (x *DAMode) UnmarshalJSON(text []byte) error {
	if s, err := strconv.Unquote(string(text)); err == nil {
		if tmp, err := ParseDAMode(s); err == nil {
			*x = tmp
			return nil
		}
	}

	var i int
	if err := json.Unmarshal(text, &i); err != nil {
		return err
	}

	if len(_values) <= i {
		return errors.Errorf("invalid DA mode: %d", i)
	}

	*x = _values[i]
	return nil
}

var errDAModeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *DAMode) Scan(value interface{}) (err error) {
	if value == nil {
		*x = DAMode("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseDAMode(v)
	case []byte:
		*x, err = ParseDAMode(string(v))
	case DAMode:
		*x = v
	case *DAMode:
		if v == nil {
			return errDAModeNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errDAModeNilPtr
		}
		*x, err = ParseDAMode(*v)
	default:
		return errors.New("invalid type for DAMode")
	}

	return
}

// Value implements the driver Valuer interface.
func (x DAMode) Value() (driver.Value, error) {
	return x.String(), nil
}
